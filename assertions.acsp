
---------------------------------------------
--		Requirements Assertions
---------------------------------------------
Requirement3 = let
					T(m,n) = (n  == 0  & connect!True!Secure -> disconnect -> connect!True!HVAC-> T(0,n+1))
							[] (n > 0 and n < MaxConnections & connect!True!Secure -> T(m,n+1))
							[] (n > 0 & connect!False!Secure -> T(m,n-1))
							[] (m  == 0  & connect!True!Open -> connect!False!HVAC -> T(m+1,n))
							[] (m  == 0  & connect!False!Open  -> T(m,n))
							[] (m > 0 and m < MaxConnections & connect!True!Open -> T(m+1,n))
							[] (m > 1 & connect!False!Open -> T(m-1,n))
							[] (m == 1 & connect!False!Open -> connect!True!HVAC -> T(m-1,n))
							[] (update -> T(m,n))							
						within connect!True!HVAC ->T(0,0)


Requirement6 =  (connect?_?_ -> Requirement6) [] (update -> disconnect -> connect!True!HVAC -> Requirement6) [] (disconnect->Requirement6)
				
Requirement3A = let
					T(n) = (n  == 0  & connect!True!Secure -> disconnect ->  T(n+1))
							[] (n > 0 and n < MaxConnections & connect!True!Secure -> T(n+1))
							[] (n > 0 & connect!False!Secure -> T(n-1))
							[] (n == 0 & connect?_!Open -> T(n))
							[] (update -> T(n))
							[] (connect?_!HVAC -> T(n))
							--[] (disconnect -> T(n))
						within T(0)


Requirement3B = let
					T(n) = (n  == 0  & connect!True!Open -> connect!False!HVAC -> T(n+1))
							[](n  == 0  & connect!False!Open  -> T(n))
							[] (n > 0 and n < MaxConnections & connect!True!Open -> T(n+1))
							[] (n > 1 & connect!False!Open -> T(n-1))
							[] (n == 1 & connect!False!Open -> connect!True!HVAC -> T(n-1))
							[] (update -> T(n))
							[] (disconnect -> connect!True!HVAC-> T(0))
							[] (connect?_!Secure -> T(n))
						within connect!True!HVAC -> T(0)

assert Requirement6 [T= accessPtComp
assert Requirement3A [T= accessPtComp
assert Requirement3B [T= accessPtComp

assert accessPtComp :[deadlock free]
assert accessPtComp :[deterministic]
assert accessPtComp :[livelock free]

assert Requirement6 [T= Upstairs
assert Requirement3A [T= Upstairs
assert Requirement3B [T= Upstairs

assert Upstairs :[deadlock free]
assert Upstairs :[deterministic]
assert Upstairs :[livelock free]

assert Requirement3 [T=  (Requirement3B [|{|connect,disconnect,update|}|]Requirement3A)
