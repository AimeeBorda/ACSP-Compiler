

EventsA = {|connect,disconnect,update|}
MonitorsA = {}

channel adapt3 : Connections


---------------------------------------------
--		Processes for Access Point
---------------------------------------------

A0 = connect!True!HVAC -> RUN({connect.x.y | x<- Bool, y <- {Secure,Open}})
A1 = connect!False!HVAC -> RUN({connect.x.y | x<- Bool, y <- {Secure,Open}})
A2 = disconnect -> connect!True!HVAC -> RUN({connect.x.Secure | x<- Bool})
A3 = RUN({connect.x.y | x<- Bool, y <- {Secure,Open}})
A4 = disconnect -> connect!True!HVAC -> RUN({connect.x.y | x<- Bool, y <- {Secure,Open}})
---------------------------------------------
--		Pattern for Access Point
---------------------------------------------	
Pattern3A =   let P(n) = 
				   (n == 0 & connect!True!Secure -> adapt3!n+1 -> ack -> P(n+1))
				[] (n < MaxConnections and n > 0 & connect!True!Secure -> P(n+1))
				[] (n > 1 & connect!False!Secure -> P(n-1))
				[] (n == 1 & connect!False!Secure -> adapt3!0 -> ack -> P(n-1))
				[] (disconnect -> P(n))
				[] (update -> P(n))
				[] (connect?_:Bool?_:{HVAC,Open} -> P(n))
				within P(0)			
	
Pattern3B =   let P(n) = 
				   (n == 0 & connect!True!Open -> adapt3!n+1 -> ack -> P(n+1))
				[] (n < MaxConnections and n > 0 & connect!True!Open -> P(n+1))
				[] (n > 1 & connect!False!Open -> P(n-1))
				[] (n == 1 & connect!False!Open -> adapt3!0 -> ack -> P(n-1))
				[] (disconnect -> P(0))
				[] (update -> P(n))
				[] (connect?_:Bool?_:{HVAC,Secure} -> P(n))
				within P(0)

Pattern6 =      (connect?_ -> Pattern6)  [] (disconnect -> Pattern6) [] (update -> adapt6 -> ack -> Pattern6)
			

---------------------------------------------
--		Adaptation Function
---------------------------------------------
Pi3A =  adapt3?n : Connections ->  
						if n == 1 then ap!<A2>.ack -> Pi3A
						else if n == 0 then ap!<A3>.ack -> Pi3A
						else ack -> Pi3A

Pi3B =  adapt3?n : Connections ->  
						if n == 1 then ap!<A1>.ack -> Pi3B
						else if n == 0 then ap!<A0>.ack -> Pi3B
						else ack -> Pi3B

Pi6 =  adapt6 -> ap!<A4>.ack -> Pi6

---------------------------------------------
--		Composition
---------------------------------------------
accessPtComp = let
			R3A = (Pi3A [|{| adapt3,ack |}|] Pattern3A) \ {| adapt3,ack|}
			R3B = (Pi3B [|{| adapt3,ack |}|] Pattern3B) \ {| adapt3,ack|}
			R6 = (Pi6 [|{| adapt6,ack |}|] Pattern6) \ {|adapt6,ack|}
			AdaptationProc = ((R3A [| EventsA |] R6) [|EventsA|] R3B)
		within
			(new ap) (ap[A0] [| EventsA |] AdaptationProc)