

EventsA = {|connect,disconnect,update|}
MonitorsA = {}

channel adapt3 : Connections
channel adapt6

---------------------------------------------
--		Processes for Access Point
---------------------------------------------
A0 = disconnect -> connect!True!HVAC -> A0'
A0' = (connect?_?_:{HVAC,Secure} -> A0')
		[] (update -> A0')

A1 = (connect?_:Bool!Secure -> A1)
		[] (update -> A1)
		[] (connect!False!Open -> A1)
		[] (connect!False!HVAC ->A1')
A1' = (connect?_:Bool?_:Connection -> A1') [] (update -> A1')

---------------------------------------------
--		Pattern for Access Point
---------------------------------------------
Pattern3A =   let P(n) =
				   (n == 0 & connect!True!Secure -> adapt3!n+1 -> ack -> P(n+1))
				[] (n < MaxConnections and n > 0 & connect!True!Secure -> P(n+1))
				[] (n > 1 & connect!False!Secure -> P(n-1))
				[] (n == 1 & connect!False!Secure -> adapt3!0 -> ack -> P(n-1))
				[] (disconnect -> P(n))
				[] (update -> P(n))
				[] (connect?_:Bool?_:{HVAC,Open} -> P(n))
				within P(0)

Pattern6 =      (connect?_ -> Pattern6)  [] (disconnect -> Pattern6) [] (update -> adapt6 -> ack -> Pattern6)


---------------------------------------------
--		Adaptation Function
---------------------------------------------
PiA3 =  adapt3?s : Connections ->
						if s == 1 then l!A0.ack -> PiA3
						else if s == 0 then l!A1'.ack -> PiA3
						else ack -> PiA3

PiA6 =  adapt6 -> l!A0.ack -> PiA6

--

---------------------------------------------
--		Composition
---------------------------------------------
accessPtComp = let
			R3 = (PiA3 [|{| adapt3,ack |}|] Pattern3A) \ {| adapt3,adapt6,ack|}
			R6 = (PiA6 [|{| adapt6,ack |}|] Pattern6) \ {|adapt3,adapt6,ack|}
			AdaptationProc = R3 [|union(EventsA,MonitorsA)|] R6
			proc = (new l)(l[A1'] [| EventsA |] AdaptationProc)
		within
			proc