
 transparent normal

 datatype State = Before | During | After
 datatype IDS = H.{0..NumSections} | L.{0..NumSections} | VIP.{0..NumSections} | Corr  | Emp

 subtype SectionID = H.{0..NumSections} | L.{0..NumSections} | VIP.{0..NumSections}  | Corr
 subtype Agent = VIP.{0..NumSections} | H.{0..NumSections} | L.{0..NumSections}  | Emp

 s = VIP.0

 NumSections = 5
 SectionSize = 5

 channel goto : Agent.SectionID.SectionID
 channel event : State
 channel alarm :Bool
 channel wind
 channel noisy : Bool
 channel open : SectionID.SectionID
 channel lights : Bool
 channel empty



 Sensors = normal(( normal((NoisePanel[|{|goto,event,open,empty|}|] AlarmPanel) )[|{|event|}|] EventStatus) )
 PhysicalController = normal((AccessController[|{|event|}|] EventStatus) )
 Section = normal((PhysicalController[|{|goto,event,open,empty,noisy,alarm|}|] Sensors) )
channel adapt2 : Bool.Bool
channel adapt
channel adapt1 : Bool

channel ack

t(x) = (x + 1) %NumSections
next(y.x) = y.t(x)
next(_) = Corr

r(x) = (x - 1) %NumSections
prev(y.x) = y.r(x)
prev(_) = Corr

notE = {x | x <- Agent, x != Emp}

adj = {next(s),prev(s),Corr}
sections = {y.z | y <- union({s},adj), z <- union({s},adj), y!=z,z == s or y ==s }

openEvt = {x.y | x <- SectionID, y <- SectionID, x == s or y ==s, x!=Corr, y != Corr}
monEvents = {| noisy,event,wind ,alarm |}
locEvents = union( {goto.y.x | x <- sections, y<- Agent} ,{open.x | x <- openEvt}	)
events = Union({locEvents, monEvents, {|empty|}})
adEvents = {|ack,adapt,adapt1|}

Behaviour(n) = (n > 0 & goto?_:{x | x<- Agent, x!= Emp}!s?_: adj -> Behaviour(n-1))
				[] (n < SectionSize & goto?_:{x | x<- Agent, x!= Emp}?_:adj!s -> Behaviour(n+1))
				[] (goto!Emp?_:sections -> Behaviour(n))
				[] (n == 0 & empty -> Behaviour(n))


SOpen = goto?_:{s,Emp}?_:adj!s -> SOpen [] goto?_:{s,Emp}!s?_ :adj -> SOpen
SExitAdj = goto!Emp?_:sections ->  SExit [] goto?_!s!Corr -> SExit [] goto?_?_:{next(s), prev(s)}!s -> SExit
SRoaming = goto?_?_:adj!s -> SRoaming	[] goto?_!s?_: adj -> SRoaming
SExit = goto!Emp?_:sections ->  SExit [] goto?_!s!Corr -> SExit

PA = let

		B = (event!Before  -> adapt -> ack -> B)
				[] (goto?_?_: sections -> B)
				[] (event?_:{During,After} -> B)
				[] (open?_ : openEvt -> B)
				[] (alarm?b ->  B)
				[] (empty -> B)
				[] (wind -> B)
				[] (noisy?_ -> B)
		within B

FA = adapt -> ac!0 -> ack -> FA

PB = let B(aft,alrm) = (event!After  -> adapt1!False -> ack -> B(True,alrm))
				[] (goto?_?_: sections -> B(aft,alrm))
				[] (event!Before -> B(False,False))
				[] (event!During -> B(False,alrm))
				[] (open?_ : openEvt -> B(aft,alrm))
				[] (alarm?b -> B(aft,b))
				[] (empty -> if not alrm and aft then adapt1!True -> ack -> B(aft,alrm) else B(aft,alrm))
				[] (wind -> B(aft,alrm or member(s,{|H|})))
				[] (noisy?_ -> B(aft,alrm))
	within B(False,False)

FB = adapt1?emp -> if not emp then ac!1 -> ack -> FB  else if  emp then ac!2 ->  ack->FB else ack->FB

PC = let B = (alarm!True  -> adapt-> ack -> B)
				[] (alarm!False -> B)
				[] (goto?_?_: sections -> B)
				[] (noisy?_ -> B)
				[] (event?_ -> B)
				[] (open?_ : openEvt -> B)
				[] (empty -> B)
				[] (wind -> B)
	within B

FC = adapt -> ac!1 -> ack -> FC

PD = let
			applies(w, n, a,ev) = not (w or n or a) and ev == During
			B(wnd, n, alrm ,emp,ev) =
							(goto?_:notE?_:adj!s -> if applies(wnd,n,alrm,ev) then adapt1!False -> ack -> B(wnd, n, alrm ,False,ev) else B(wnd, n, alrm ,False,ev))
						[] (goto!Emp?_ : sections -> B(wnd, n, alrm, emp,ev))
						[] (goto?_:notE!s?_:adj -> B(wnd, n, alrm, emp,ev))
						[] (empty -> B(wnd, n, alrm, emp,ev))
						[] (open?_ :{x.y | x.y <-openEvt,y!=s} -> B(wnd, n, alrm, emp,ev))
						[] (open?_ :{x.y | x.y <-openEvt,y ==s} -> B(wnd, n, alrm, False,ev))
						[] (event!Before -> B(False, False,False,True,Before))
						[] (event!After -> B(wnd, n, alrm ,emp,After))
						[] (event!During -> if applies(wnd,n,alrm,ev) then  adapt1!emp -> ack -> B(wnd, n,alrm,emp,During) else B(wnd, n, alrm ,emp,During))

						[] (wind -> B(member(s, {|H|}), n, alrm,emp,ev))
						[] (alarm?b -> if applies(wnd,n,b,ev) then adapt1!emp -> ack -> B(wnd, n, b,emp,ev) else B(wnd,n,b,emp,ev))
						[] (noisy?b -> if applies(wnd,b,alrm,ev) then adapt1!emp -> ack -> B(wnd, b, alrm,emp,ev) else B(wnd,b,alrm,emp,ev))

		within B(False,False,False,True,Before)

FD = adapt1?emp:Bool -> if not emp or member(s,{|VIP|}) then ac!3 -> ack -> FD else if emp then ac!4 ->  ack -> FD else ack -> FD

PE = let
			applies(alrm,ev) = (not alrm) and (ev == During)
			A(alrm,w,ev,ba) =
					(goto?_?_: sections -> A(alrm,w,ev,ba))
				[] (open!s?_ :{y | x.y <- openEvt,x==s, member(y,{|L|})} -> if applies(alrm,ev) and w then adapt1!True -> ack -> A(alrm,w,ev,True)else A(alrm,w,ev,True))
				[] (open?_ : {x.y | x.y <- openEvt, x != s or not member(y,{|L|})} -> A(alrm,w,ev,ba))
				[] (empty -> A(alrm,w,ev,ba))

				[] (event!Before -> A(False,False,Before,False))
				[] (event!During -> if applies(alrm,ev) and w then adapt1!False -> ack -> A(alrm,w,During,ba) else A(alrm,w,During,ba))
				[] (event!After -> A(alrm,w,After,ba))

				[] (wind -> if applies(alrm,ev) then adapt1!False -> ack -> A(alrm,True,ev,False) else A(alrm,True,ev,False))
				[] (alarm?b -> if applies(b,ev) and w then adapt1!ba -> ack -> A(b,w,ev,ba) else A(b,w,ev,ba))
				[] (noisy?_ -> A(alrm,w,ev,ba))
		within A(False,False,Before,False)

FE = adapt1?backup -> if (not backup and member(s, {|H|})) then ac!5 -> ack -> FE else if (backup and member(s, {|H|})) then ac!1 -> ack -> FE else ack->FE

PF = let
			applies(alrm,w,ev) = not(alrm or w) and (ev == During)
			B(alrm,w,n,ev) = (goto?_ ?_: sections-> B(alrm,w,n,ev))
					[] (event!Before -> B(False,False,False,Before))
					[] (event!After -> B(alrm,w,n,After))
					[] (event!During -> B(alrm,w,n,During))
					[] (open?_ : openEvt -> B(alrm,w,n,ev))
					[] (noisy?b -> if applies(alrm,w,ev) and b then adapt -> ack -> B(alrm,w,b,ev) else B(alrm,w,b,ev))
					[] (wind -> B(alrm,member(s,{|H|}),n,ev))
					[] (alarm?b -> if applies(b,w,ev) and n then adapt -> ack -> B(b,w,n,ev) else B(b,w,n,ev))
					[] (empty -> B(alrm,w,n,ev))

		within B(False,False,False,Before)

FF = adapt -> ac!6 ->  ack -> FF

PG = let
		applies(alrm,w,n,ev) = not (alrm or w or n) and ev != Before
		B(alrm,w,n,e,ev) = (goto!Emp?_: adj!s -> B(alrm,w,n,e,ev))
				[] (goto?_:notE?_: adj!s -> B(alrm,w,n,False,ev))
				[] (goto?_!s?_: adj -> B(alrm,w,n,e,ev))
				[] (event!Before -> B(False,False,False,True,Before))
				[] (event!After -> B(alrm,w,n,e,After))
				[] (open?_ : {x.y | x.y <- openEvt, y != s} -> B(alrm,w,n,e,ev))
				[] (open?_ : {x.y | x.y <- openEvt, y == s} -> if applies(alrm,w,n,ev) and e then adapt1!ev == During -> ack -> B(alrm,w,n,False,ev) else B(alrm,w,n,False,ev))
				[] (wind -> B(alrm,member(s, {|H|}),n,e,ev))
				[] (noisy?b -> B(alrm,w,b,e,ev))
				[] (event!During -> B(alrm,w,n,e,During))
				[] (empty -> B(alrm,w,n,True,ev))
				[] (alarm?b ->  B(b,w,n,e,ev))

		within B(False,False,False,True,Before)

FG = adapt1?d -> if d then ac!3 ->  ack -> FG else if not d then ac!7 ->  ack -> FG else ack -> FG

AccessController = let


		RA = normal((PA[|adEvents|] FA) ) \ adEvents
		RB = normal((PB[|adEvents|] FB) ) \ adEvents
		RC = normal((PC[|adEvents|] FC) ) \ adEvents
		RD = normal((PD[|adEvents|] FD) ) \ adEvents
		RE = normal((PE[|adEvents|] FE) ) \ adEvents
		RF = normal((PF[|adEvents|] FF) ) \ adEvents
		RG = normal((PG[|adEvents|] FG) ) \ adEvents

		C1 = normal((RA[|events|] RB) )
		C2 = normal((C1[|events|] RC) )
		C3 = normal((C2[|events|] RD) )
		C4 = normal((C3[|events|] RE) )
		C5 = normal((C4[|events|] RF) )
		C6 = normal((C5[|events|] RG) )


		AdaptationProc = normal((C6[|{|goto,empty|}|] Behaviour(0)) )

	within normal((let R = ac?id -> (map(ac,id) /\ R) 
 within (SExit/\ R)[|union( locEvents,{| ac|})|] AdaptationProc)  \ {| ac|})

EventStatus = event!Before -> event!During -> event!After -> EventStatus
Lights_0 = lights!True -> STOP
Lights_1 = lights!False -> STOP
PI =
		let B(n,emp,ev) = (goto!Emp?_:sections -> B(n,emp,ev))

				[] (event!During-> adapt2!n!emp -> ack ->  B(n,emp,During))
				[] (event!Before -> adapt2!n!False -> ack -> B(n, True,Before))
				[] (event!After ->  B(n,emp,After))
				[] (empty -> if ev == After then adapt2!n!True -> ack -> B(n,True,ev) else B(n,emp,ev))

				[] (goto?_ :notE?_:adj!s -> if emp and ev != Before then adapt2!n!False -> ack -> B(n,False,ev) else B(n,False,ev))
				[] (goto?_ :notE!s?_:adj -> B(n,emp,ev))

				[] (open?_ : {x.y | x.y <- openEvt, y !=s} -> B(n,emp,ev))
				[] (open?_ : {x.y | x.y <- openEvt, y ==s} -> adapt2!n!False -> ack -> B(n,False,ev))
				[] (lights?b -> B(b,emp,ev))
			within B(False,True,Before)


FI = adapt2?l?emp -> if l and emp then lp!0 ->  ack -> FI else if not l and not emp then lp!1 -> ack -> FI else lp!2 -> ack -> FI



LightsPanel = let
		AdaptationProc = normal((PI[|{|adapt2,ack|}|] FI) ) \ {|adapt2,ack|}
	within normal((let R = lp?id -> (map(lp,id) /\ R) 
 within (STOP/\ R)[|union( {|lights|},{| lp|})|] AdaptationProc)  \ {| lp|})

Noisy_0 = noisy!False -> STOP
Noisy_1(b) = noisy!b -> Noisy_1(not b)

PH =
		let B(n,emp,ev) = (goto!Emp?_:sections -> B(n,emp,ev))
				[] (event!Before -> adapt2!n!True -> ack -> B(n,True,Before))
				[] (event!During -> if emp then adapt2!n!emp -> ack-> B(n,emp,During) else B(n,emp,During))
				[] (event!After -> adapt2!n!True-> ack -> B(n,emp,After))
				[] (noisy?b -> B(b,emp,ev))
				[] (empty -> if ev == During then adapt2!n!True -> ack ->  B(n,True,ev) else B(n,True, ev))
				[] (goto?_ :notE?_:adj!s -> if ev == During and emp then  adapt2!n!False -> ack->  B(n,False,ev)else B(n,False,ev))
				[] (goto?_ :notE!s?_:adj -> B(n,emp,ev))
				[] (open?_ :openEvt-> B(n,emp,ev))
			within  B(False,True,Before)

FH = adapt2?n?emp -> if emp and n then np!0 ->  ack -> FH
					else if not emp and n then np!1 ->  ack -> FH
					else if not emp and not n then np!2 -> ack -> FH
					else if emp and not n then np!3 ->  ack -> FH
					else ack -> FH


NoisePanel = let
		AdaptationProc = normal((PH[|{|adapt2,ack|}|] FH) ) \ {|adapt2,ack|}
	within normal((let R = np?id -> (map(np,id) /\ R) 
 within (STOP/\ R)[|union( {|noisy|},{| np|})|] AdaptationProc)  \ {| np|})

Alarm_1(b) = alarm!b -> Alarm_1(not b)

AlarmPanel = Alarm_1(True)
 -- File /Users/aimeeborda/ACSP-Compiler/Examples/Stadium/assertions.acsp


ReqA = 	let
				R =  (goto?_?_:sections -> R)
					[] (noisy?_ -> R)
					[] (wind -> R)
					[] (alarm?_ -> R)
					[] (event!Before -> B)
					[] (event?_:{During,After} -> R)
					[] (open?_ : openEvt -> R)
					[] (empty -> R)
				B = (goto!Emp?_:adj!s -> B)
					[] (goto!s?_:adj!s -> B)
					[] (event?_:{During,After} -> R)
					[] (event!Before -> B)
					[] (empty -> B)
					[] (noisy?_ -> B)
					[] (wind -> B)
					[] (alarm?_ -> R)
					[] (goto?_!s?_: adj -> B)
			within R

ReqB = 	let
				B(emer) =
						 (event!During -> B(emer))
						[] (event!Before -> B(False))
						[] (event!After -> T(emer,False))
						[] (noisy?_ -> B(emer))
						[] (wind -> B(emer or member(s,{|H|})))
						[] (alarm?b -> B(b))
						[] (goto?_?_ :sections-> B(emer))
						[] (open?_ : openEvt -> B(emer))
						[] (empty -> B(emer))
				T(emer,emp)  = (goto!Emp?_ :sections-> T(emer,emp))
						[] (event!During -> B(emer))
						[] (event!Before -> B(False))
						[] (event!After -> T(emer,False))
						[] (noisy?_ -> T(emer,emp))
						[] (wind -> T(emer or member(s,{|H|}),emp))
						[] (alarm?b -> B(b))
						[] (goto?_:notE!s!Corr -> T(emer,emp))
						[] (empty -> T(emer,True))
						[] (emp & goto?_:notE?_:{next(s),prev(s)}!s -> T(emer,emp))
					 	[] (emp & open?_ :{x.y | x.y <- openEvt,y==s, member(x, adj)} -> T(emer,emp))
					 	[] (not emp or emer & open?_ :{x.y | x.y <- openEvt,x==s} -> T(emer,emp))
			within
				B(False)

ReqC = 	let
				R =  (goto?_ ?_:sections-> R)
					[] (noisy?_ -> R)
					[] (wind -> R)
					[] (alarm!True -> B)
					[] (alarm!False -> R)
					[] (event!After -> R)
					[] (event?_:{During,Before} -> R)
					[] (open?_ : openEvt -> R)
					[] (empty -> R)
				B = (goto!Emp?_:adj!s -> B)
					[] (event!Before -> R)
					[] (event?_:{After,During} -> B)
					[] (noisy?_ -> B)
					[] (wind -> B)
					[] (open?_ : {x.y | x.y <- openEvt, y != s}  -> B)
					[] (alarm!True -> B)
					[] (alarm!False -> R)
					[] (goto?_!s?_: adj -> B)
					[] (empty -> B)
			within
				R

ReqD = 	let R(emp) = (event!Before -> R(True))
						[] (event!During -> during(emp))
						[] (event!After -> R(emp))
						[] (goto?_: notE?_ :adj!s -> R(False))
						[] (goto!Emp?_:adj!s -> R(emp))
						[] (goto?_!s?_ :adj-> R(emp))
						[] (noisy?_ -> R(emp))
						[] (wind -> R(emp))
						[] (alarm?_ -> R(emp))
						[] (open?_ :openEvt-> R(emp))
						[] (empty -> R(emp))
				during(b) =  (goto!Emp?_ :sections-> during(b))
						[] (goto?_:notE!s?_ :adj -> during(b))
						[] (b and not member(s,{|VIP|}) & goto!s?_ :adj!s -> during(False))
						[] (not b or member(s,{|VIP|}) & goto?_:notE?_ :adj!s -> during(b))
						[] (noisy?_ -> during(b))
						[] (wind -> during(b))
						[] (alarm?_ -> during(b))
						[] (event?_ :{Before,After} -> R(True))
						[] (event!During -> during(b))
						[] (open?_ : {x.y | x.y <- openEvt,y!=s} -> during(b))
						[] (b & open?_ : {x.y | x.y <- openEvt,y ==s} -> R(b))
						[] (empty -> during(b))
			within
				  R(True)

ReqE = let
				R1(w) = (goto?_?_:sections -> R1(w))
					[] (noisy?_ -> R1(w))
					[] (wind -> R1(member(s, {|H|})))
					[] (open?_ :openEvt -> R1(w))
					[] (event!Before  -> R1(False))
					[] (event!After  -> R1(w))
					[] (event!During  -> W(False,w))
					[] (alarm?_ -> R1(w))
					[] (empty -> R1(w))
				W(backup,w) = (goto!Emp?_ :sections-> W(backup,w))
					[] (not backup and w and member(s,{|H|}) & goto!s?_:adj!s -> W(backup,w))
					[] (not w or not member(s,{|H|})& goto?_:notE?_:adj!s -> W(backup,w))
					[] (empty -> W(backup,w))
					[] (event!After -> R1(w))
					[] (event!Before -> R1(False))
					[] (event!During -> W(False,w))
					[] (noisy?_ -> W(backup,w))
					[] (wind -> W(False,member(s, {|H|})))
					[] (alarm?_ -> W(backup,w))
					[] (goto?_:notE!s?_: adj -> W(backup,w))
					[] (open!s?_ : {x | x <- SectionID, not member(x, {|H,VIP|}), x!= s} -> W(w,w))
					[] (open!s?_ : {x | x <- SectionID, member(x, {|H,VIP|}), x!= s} -> W(backup,w))
					[] (not w & open?_ : {x | x <- SectionID, x!= s, x!=Corr}!s -> W(backup,w))
			within
				R1(False)

ReqF = let
			R =  (goto?_?_:sections -> R)
					[] (noisy?_ -> R)
					[] (wind -> R)
					[] (alarm?_ -> R)
					[] (open?_ :openEvt -> R)
					[] (empty -> R)
					[] (event?_ :{Before,After}-> R)
					[] (event!During -> B(False))
			B(n) = (goto!Emp?_ :sections-> B(n))
					[] (event?_ :{Before,After} -> R)
					[] (event!During -> B(n))
					[] (noisy?b -> B(b))
					[] (wind -> B(n))
					[] (alarm?_ -> B(n))
					[] (empty -> B(n))
					[] (goto?_:notE!s?_: adj -> B(n))
					[] (n & open?_ : {x.y | x.y <- openEvt,y != s} -> B(n))
					[] (not n & open?_ : openEvt -> B(n))
					[] (n & goto!s?_:adj!s -> B(n))
					[] (not n & goto?_:notE?_:adj!s -> B(n))
			within R

ReqG = 	let
			applies(alrm,wnd,nois) = not (alrm or wnd or nois)
			R(alrm,wnd,no,emp,opn) = (goto!Emp?_ :sections-> R(alrm,wnd,no,emp,opn))
				[] (goto?_:notE!s?_:adj -> R(alrm,wnd,no,emp,opn))
				[] (emp & goto!s?_:adj!s  -> R(alrm,wnd,no,False,opn))
				[] (not emp or opn or member(s,{|VIP|}) &goto?_:notE?_:adj!s  -> R(alrm,wnd,no,False,opn))

				[] (event!During -> R(alrm,wnd,no,emp,opn))
				[] (event!Before -> B(False,False,False,True,False))
				[] (event!After -> A(alrm,wnd,no,emp,opn))
				[] (noisy?b -> R(alrm,wnd,b,emp,opn))
				[] (wind -> R(alrm,member(s, {|H|}),no ,emp,opn))
				[] (alarm?b -> R(b,wnd,no,emp,opn))
				[] (empty -> R(alrm,wnd,no,emp,opn))

				[] (open?_ :{x.y | x.y <- openEvt,y != s} -> R(alrm,wnd,no,emp,opn))
				[] (applies(alrm,wnd,no) and emp & open?_ :{x.y | x.y <- openEvt,y == s} -> B(alrm,wnd,no,emp,True))
			B(alrm,wnd,no,emp,opn) = (goto!Emp?_ :sections-> B(alrm,wnd,no,emp,opn))
				[] (goto?_:notE!s?_:adj -> B(alrm,wnd,no,emp,opn))
				[] (goto?_:notE?_ :adj !s -> B(alrm,wnd,no,False,opn))

				[] (event!During -> R(alrm,wnd,no,emp,opn))
				[] (event!Before -> B(False,False,False,True,False))
				[] (event!After -> A(alrm,wnd,no,emp,opn))
				[] (noisy?b -> B(alrm,wnd,b,emp,opn))
				[] (wind -> B(alrm, member(s, {|H|}),no,emp,opn))
				[] (alarm?b -> B(b,wnd,no,emp,opn))
				[] (empty -> B(alrm,wnd,no,emp,opn))

				[] (open?_ :{x.y | x.y <- openEvt,y != s} -> B(alrm,wnd,no,emp,opn))
			A(alrm,wnd,no,emp,opn) = (goto!Emp?_ :sections -> A(alrm,wnd,no,emp,opn))
				[] (goto?_:notE!s!Corr -> A(alrm,wnd,no,False,opn))
				[] (opn & goto?_:notE?_:{next(s),prev(s)}!s -> A(alrm,wnd,no,emp,opn))

				[] (event!During -> R(alrm,wnd,no,emp,opn))
				[] (event!Before -> B(False,False,False,True,opn))
				[] (event!After -> A(alrm,wnd,no,emp,opn))
				[] (noisy?b -> A(alrm,wnd,b,emp,opn))
				[] (wind -> A(alrm,member(s, {|H|}),no,emp,opn))
				[] (alarm?b -> A(b,wnd,no,emp,opn))
				[] (empty -> A(alrm,wnd,no,True,opn))

				[] (open?_ :{x.y | x.y <- openEvt,y != s} -> A(alrm,wnd,no,emp,opn))
				[] (not applies(alrm,wnd,no) or emp & open?_ :{x.y | x.y <- openEvt,y == s} -> A(alrm,wnd,no,emp,True))
		within
			B(False,False,False,True,False)

ReqH =
		let
			B(emp,n) = ((goto!Emp?_:sections -> B(emp,n))
				[] (goto?_ : notE?_:adj!s -> B(False,n))
				[] (goto?_ : notE!s?_:adj -> B(emp,n))
				[] (empty -> B(True,n))
				[] (open?_ :openEvt -> B(emp,n))
				[] ((not emp) & noisy!(not n) -> B(emp,(not n)))
				[] (emp and n& noisy!False -> B(emp,False))
				[] (event!After -> B(True,n))
				[] (event!Before -> B(True,n))
				[] (event!During -> B(emp,n)))
		within B(True,False)


ReqI = 	let B(n,emp,ev) = (goto!Emp?_:sections -> B(n,emp,ev))
				[] (empty -> B(n,emp or ev == After,ev))
				[] (event!During -> B(n,emp,During))
				[] (event!Before -> B(n,True,Before))
				[] (event!After  -> B(n,emp,After))

				[] (not n and not emp & lights!not n -> B(not n,emp,ev))
				[] (n and emp and ev != Before & lights!not n -> B(not n,emp,ev))
				[] (not n and ev == Before & lights!not n -> B(not n,emp,ev))

				[] (goto?_ :notE?_:adj!s -> B(n,False,ev))
				[] (goto?_ :notE!s?_:adj -> B(n,emp,ev))

				[] (open?_ : {x.y | x.y <- openEvt, y !=s} -> B(n,emp,ev))
				[] (open?_ : {x.y | x.y <- openEvt, y ==s} ->  B(n,False,ev))
				[] (alarm?_ -> B(n,emp,ev))
				[] (noisy?_ -> B(n,emp,ev))
				[] (wind -> B(n,emp,ev))
			within  B(False,True,Before)

assert ReqA [T= PhysicalController
assert ReqB [T= PhysicalController
assert ReqC [T= PhysicalController
assert ReqD [T= PhysicalController
assert ReqE [T= PhysicalController
assert ReqF [T= PhysicalController
assert ReqG [T= PhysicalController
assert ReqH [T= NoisePanel
assert ReqI [T= normal((LightsPanel[|{|event,goto,empty,open|}|] PhysicalController) )


channel ac : {0..7}
channel np : {0..3}
channel lp : {0..2}

map = \ chName,id @ if chName == ac and id == 0 then SOpen 
else if chName == ac and id == 1 then  normal((SExit||| open!s?_ : {x | x <- adj, x!= Corr} -> SKIP) ) 
else if chName == ac and id == 2 then  normal((SExit||| open?_ : {x | x <- adj, x!= Corr}!s -> SKIP) ) 
else if chName == ac and id == 3 then SRoaming 
else if chName == ac and id == 4 then  normal((SOpen||| (open?_ : {x | x <-SectionID, x!=s, x!=Corr}!s -> SKIP)) ) 
else if chName == ac and id == 5 then  normal((SOpen||| (open!s?_ : {L.x, VIP.x | x <- {0..NumSections}} -> SKIP)) ) 
else if chName == ac and id == 6 then  normal((SOpen||| (open!s?_ : {x | x <- SectionID, x!=s,x!=Corr}-> SKIP)) ) 
else if chName == ac and id == 7 then SExitAdj 
else if chName == np and id == 0 then Noisy_0 
else if chName == np and id == 1 then Noisy_1(False) 
else if chName == np and id == 2 then Noisy_1(True) 
else if chName == np and id == 3 then STOP 
else if chName == lp and id == 0 then Lights_1 
else if chName == lp and id == 1 then Lights_0 
else if chName == lp and id == 2 then STOP 
else SKIP
