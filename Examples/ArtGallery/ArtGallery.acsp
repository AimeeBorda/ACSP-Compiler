transparent normal

datatype Room = EA | EB | ED | Corr | Corr2 | RA | Str
datatype Connection = Secure | Open | HVAC

Processes = {0..4}
MaxAgents = 100
MaxAgentsEA = MaxAgents*2
MaxAgentsPair = MaxAgents
EmergencyCount = 2

notR(rm) = {x | x<- Room, x != rm}

---------------------------------------------
--		Events
---------------------------------------------
channel adapt : {0..MaxAgentsEA}
channel adaptRA : {0..MaxAgents*2}.Bool
channel adaptE
channel adapt6

channel emergency 				-- local state (True over MaxAgents, False under MaxAgents)
channel goto : Room.Room			-- agents' movement
channel grd : Room.Room			-- visitors' movement

channel connect : Bool.Connection		-- agents' movement
channel disconnect 
channel update

channel ack

Stairs = 

		let P(n) = (n > 0 & goto!Str!Corr2 -> (connect!True!Open  -> P(n-1)))
					[] (n > 0 & goto!Str!Corr -> P(n-1))
					[] (n < MaxAgents & goto!Corr!Str -> P(n+1))
					[] (n < MaxAgents & goto!Corr2!Str ->(connect!False!Open  -> P(n+1)))
					[] (grd!Corr2!Str -> connect!False!Secure  -> P(n))
					[] (grd!Str!Corr2 -> connect!True!Secure  -> P(n))
					[] (grd!Str!Corr -> P(n))
		within P(0)


---------------------------------------------
--		Event for EB
---------------------------------------------
EventsD = {goto.EB.ED,goto.ED.Corr}
Monitors2 = {|emergency|}

MonitorsD = union(Monitors5, {x | x <- Monitors2, approachOne})

---------------------------------------------
--		Processes for ED
---------------------------------------------

D0 = (goto!ED!Corr -> D0) [] (goto!EB!ED -> D0)
D1 = goto!ED!Corr -> D1

---------------------------------------------
--		Behaviour for ED
---------------------------------------------

BehaviourD = let D(n) =  (n > 0 & goto!ED!Corr -> D(n-1))
					[] (n <= MaxAgentsEA & goto!EB!ED -> D(n+1))
				within D(0)

---------------------------------------------
--		Requirements for ED
---------------------------------------------

Pattern2 = let P(n) = 
				   (goto!ED!Corr -> if n==MaxAgents then adapt!n-1 -> ack -> P(n-1) else if n > 0 then P(n-1) else P(0))
				[] (goto!EB!ED -> if n >= MaxAgents - 1 then adapt!MaxAgents -> ack -> P(MaxAgents) else P(n+1))
				[] (emergency -> RUN(union(EventsD,Monitors2)))
		within P(0)
Pi2 =  adapt?v  ->  if v == MaxAgents then ld!<D1>.ack -> Pi2 else ld!<D0>.ack -> Pi2


Pattern5D = (emergency -> adaptE -> ack -> Pattern5D) [] (goto?_: {x | goto.x <- EventsD} -> Pattern5D)
Pi5D =  adaptE  ->  ld!<D0>.ack -> Pi5D

---------------------------------------------
--		Composition
---------------------------------------------

RmD = let
		eventsR2 = union(EventsD,Monitors2)
		eventsR5 = union(EventsD,Monitors5)

		events = union(eventsR2,eventsR5)
		R2 = (Pattern2 [|{|adapt,ack|}|] Pi2) \ {|adapt,ack|}
		R5 = (Pattern5D [|{|adaptE,ack|}|] Pi5D) \ {|adaptE,ack|}

		FirstApproach = (BehaviourD [|inter(EventsD,events)|] (R2  [|inter(eventsR2,eventsR5)|] R5))
		SecondApproach = (BehaviourD [|inter(EventsD,eventsR5)|] R5)
    within
		(new ld)(ld[D0] [| EventsD |] (if(approachOne) then FirstApproach else SecondApproach))


---------------------------------------------
--		Events for EB
---------------------------------------------
EventsB = {goto.EB.EA,goto.EB.ED,goto.EA.EB}
Monitors2B = union(EventsD,Monitors5)

MonitorsB = union({x | x<- Monitors2B, not approachOne}, Monitors5)

---------------------------------------------
--		Processes for EB
---------------------------------------------
B0 = (goto!EB?_:{EA,ED} -> B0) [] (goto!EA!EB -> B0) 
B1 = (goto!EB?_:{EA,ED} -> B1)

---------------------------------------------
--		Behaviour for EB
---------------------------------------------
BehaviourB = let B(n) =  (n > 0 & goto!EB?_:{EA,ED} -> B(n-1))
					[] (n <= MaxAgentsEA & goto!EA!EB -> B(n+1))
				within B(0)

---------------------------------------------
--		Requirement for EB
---------------------------------------------
Pattern2B = let P(n) = 
		   	   		(goto!EB!EA -> if(n == MaxAgentsPair) then adapt!n-1 -> ack -> P(n-1) else if(n > 0) then P(n-1) else P(0)) 
		   	 	[] (goto!EA!EB -> if(n >= MaxAgentsPair-1) then adapt!n+1 -> ack -> P(MaxAgentsPair) else P(n+1))
				[] (goto!ED!Corr -> if(n == MaxAgentsPair) then adapt!n-1 -> ack -> P(n-1) else if (n >0) then P(n-1) else P(0)) 
				[] (goto!EB!ED -> P(n))
				[] (emergency -> RUN(union(EventsB,Monitors2B)))
			within P(0)
Pi2B =  adapt?v  ->  if v == MaxAgentsPair then lb!<B1>.ack -> Pi2B else lb!<B0>.ack -> Pi2B


Pattern5B = (emergency -> adaptE -> ack -> Pattern5B) [] (goto?_: {x | goto.x <- EventsB} -> Pattern5B)
PiEmergencyB =  adaptE  ->  lb!<B0>.ack -> PiEmergencyB

---------------------------------------------
--		Composition
---------------------------------------------
RmB = let
			eventsR2B = union(EventsB,Monitors2B)
			eventsR5 = union(EventsB,Monitors5)

			events = Union({eventsR2B,eventsR5})
			R5 = (PiEmergencyB [|{|adaptE,ack|}|] Pattern5B)  \ {|adaptE,ack|}
			R2B = (Pi2B [|{|adapt,ack|}|] Pattern2B) \ {|adapt,ack|}
			
			FirstApproach = (R5 [| inter(EventsB,eventsR5) |] BehaviourB)
			SecondApproach = (BehaviourB [|inter(EventsB, events) |] (R5 [| inter(eventsR5,eventsR2B) |] R2B))
		within
			(new lb)(lb[B0] [| EventsB |] (if(approachOne) then FirstApproach else SecondApproach))

EventsA = {goto.EB.EA,goto.EA.Corr,goto.EA.EB,goto.Corr.EA}

Monitors4 = union(EventsD,Monitors5)
Monitors2A = union(EventsB,Monitors5)
Monitors5 = {emergency}

MonitorsA = Union({Monitors5,Monitors4, {x | x <- Monitors2A, not approachOne}})
---------------------------------------------
--		Processes for EA
---------------------------------------------
A0 = (goto!EB!EA -> A0) [] (goto!EA?_:{Corr,EB} -> A0) [] (goto!Corr!EA -> A0)
A1 = (goto!EB!EA -> A1) [] (goto!EA?_:{Corr,EB} -> A1)

---------------------------------------------
--		Behaviour for EA
---------------------------------------------
BehaviourA =  let B(n) = (n <= MaxAgentsEA & goto!Corr!EA -> B(n+1))
							[] (n > 0 & goto!EA!Corr -> B(n-1))
							[] (n > 0 & goto!EA!EB -> B(n-1))
							[] (n <= MaxAgentsEA & goto!EB!EA -> B(n+1))
				within B(0)

---------------------------------------------
--		Requirements for EA
---------------------------------------------	
Pattern4 =  
		let P(n) =  (goto?_:{EA,ED}!Corr -> if(n >= MaxAgentsEA) then adapt!n-1 -> ack-> P(n-1) else if (n > 0) then P(n-1) else P(0))
				[] (goto!Corr!EA -> if(n >= MaxAgentsEA - 1) then adapt!MaxAgentsEA -> ack -> P(MaxAgentsEA) else P(n+1))
				[] (goto!EA!EB -> P(n))  
				[] (goto!EB!EA -> P(n)) 
				[] (goto!EB!ED -> P(n))
				[] (emergency -> RUN(union(EventsA,Monitors4))) 
			
		within P(0)
Pi4 =  adapt?v  ->  if v >= MaxAgentsEA then la!<A1> .ack -> Pi4 else la!<A0>. ack -> Pi4

Pattern2A = let P(n) =  (goto!Corr!EA -> if(n >= MaxAgentsPair - 1) then adapt!MaxAgentsPair -> ack -> P(MaxAgentsPair) else P(n+1))
					[] (goto!EA!Corr -> if(n >= MaxAgentsPair) then adapt!n-1 -> ack -> P(n-1) else if (n > 0) then P(n-1) else P(0))
					[] (goto!EB!ED   -> if(n >= MaxAgentsPair) then adapt!n-1 -> ack -> P(n-1) else if (n > 0) then P(n-1) else P(0))
					[] (goto!EA!EB -> P(n))  
					[] (goto!EB!EA -> P(n)) 
					[] (emergency -> RUN(union(EventsA,Monitors2A))) 
			within P(0)
Pi2A =  adapt?v  ->  if v >= MaxAgentsPair then la!<A1>.ack -> Pi2A else la!<A0>.ack -> Pi2A


Pattern5A = (emergency -> adaptE -> ack -> Pattern5A) [] (goto?_: {x | goto.x <- EventsA} -> Pattern5A)
PiEmergencyA =  adaptE  ->  la!<A0>.ack -> PiEmergencyA

---------------------------------------------
--		Composition
---------------------------------------------
RmA = let
			eventsR2A = union(EventsA,Monitors2A)
			eventsR4 = union(EventsA,Monitors4)
			eventsR5 = union(EventsA,Monitors5)


			R4 = (Pi4 [|{|adapt,ack|}|] Pattern4) \ {|adapt,ack|}
			R2A = (Pi2A [|{|adapt,ack|}|] Pattern2A) \ {|adapt,ack|}
			R5 = (PiEmergencyA [|{|adaptE,ack|}|] Pattern5A) \ {|adaptE,ack|}
			
			FirstApproach = ((R4 [|inter(eventsR4,eventsR5) |] R5)  [|inter(EventsA,Union({eventsR4,eventsR5}))|] BehaviourA)
			SecondApproach =  ((R2A [|inter(eventsR2A,eventsR5) |] R5) [|inter(EventsA,Union({eventsR2A,eventsR5}))|] BehaviourA)
        within
			(new la) (la[A0] [| EventsA |] (if(approachOne) then FirstApproach else SecondApproach))


---------------------------------------------
--		Event for RestorationArea
---------------------------------------------
EventsRA = {goto.RA.Corr2,goto.Corr2.RA,grd.Corr2.RA,grd.RA.Corr2}

Monitors5RA = {|emergency|}
Monitors1 =  union(EventsC2,Monitors5RA)

MonitorsRA = union(Monitors5RA,Monitors1)

---------------------------------------------
--		Event for Corridor Two
---------------------------------------------

EventsC2 = {goto.Str.Corr2,goto.Corr2.Str, grd.Corr2.Str, grd.Str.Corr2,goto.Corr2.RA,goto.RA.Corr2,grd.Corr2.RA,grd.RA.Corr2}
Monitors1C2 =  {emergency}
MonitorsC2 = union(Monitors5RA, Monitors1C2)

eventsR1 = Union({EventsC2,EventsRA,Monitors1})
eventsR5RA = union(EventsRA,Monitors5RA)
eventsR5C2 = union(EventsC2,Monitors5RA)

---------------------------------------------
--		Processes for Restoration Area
---------------------------------------------

R0 = (goto!RA!Corr2 -> R0) [] (goto!Corr2!RA -> R0) [] (grd?_ :{x| grd.x <- EventsRA}-> R0)
R1 = (goto!RA!Corr2 -> R1) [] (grd?_ :{x| grd.x <- EventsRA}-> R1)

---------------------------------------------
--		Behaviour for Restoration Area
---------------------------------------------
BehaviourRA = (R(0) ||| R2(False))

R(v) =  (v < MaxAgents & goto!Corr2!RA -> R(v+1))
		[] (v > 0 & goto!RA!Corr2 -> R(v-1))
			
	
R2(b) = (not b & grd!Corr2!RA -> R2(True)) 
		[] (b & grd!RA!Corr2 -> R2(False))


---------------------------------------------
--		Processes for Corridor Two
---------------------------------------------

C2_0 =  (goto?_: {x | goto.x <- EventsC2} -> C2_0)
		[] (grd?_: {x | grd.x <- EventsC2} -> C2_0)
		

C2_1 = 	(goto?_: {x | goto.x <- EventsC2} -> C2_1)
		[] grd?_:{Str,RA}!Corr2 -> C2_1
		[] grd!Corr2!RA -> C2_1

---------------------------------------------
--		State for Corridor Two
---------------------------------------------

C(n) = (n > 0 & goto!Corr2!RA -> C(n-1)) 
		[](n > 0 & goto!Corr2!Str -> C(n-1)) 
		[] (n < MaxAgents & goto!Str!Corr2 -> C(n+1))
		[] (n < MaxAgents & goto!RA!Corr2 -> C(n+1))
	
C2(u) = (u & grd!Corr2!Str -> C2(False)) 
		[] (u & grd!Corr2!RA -> C2(True)) 
		[] (u & grd!RA!Corr2 -> C2(True))
		[] (not u & grd!Str!Corr2 -> C2(True))


		
Beh = (C(0) ||| C2(False))

---------------------------------------------
--		Requirements for ED
---------------------------------------------
Pattern1 = let P(v,g) = 
				 (grd!Str!Corr2 ->  adaptRA!v!True -> ack -> P(v,True))
				[] (grd!Corr2!Str -> adaptRA!v!False -> ack -> P(v,False))
				[] (grd?_: {x.y | x <-{Corr2,RA}, y<-{RA,Corr2}, x!= y} -> P(v,g))
				
				[] (goto!Corr2!Str -> if v == 1 then adaptRA!v-1!g -> ack -> P(v-1,g) else if v > 0 then P(v-1,g) else P(0,g)) 
				[] (goto!Str!Corr2 -> if v == 0 then adaptRA!v+1!g -> ack -> P(v+1,g) else if v < MaxAgents*2 then P(v+1,g) else P(MaxAgents*2,g)) 
				[] (goto?_ :{x.y| x <- {RA,Corr2}, y <- {RA,Corr2},x!=y} -> P(v,g))						
				
				[] (emergency -> RUN(Union({EventsC2,EventsRA,Monitors1})))
		within P(0,False)
Pi1 =  adaptRA?v?g  ->  let F2 = if g then ra!<R0>. ack -> Pi1 else ra!<R1>. ack -> Pi1
					within if v>0 then c2!<C2_1>. F2 else c2!<C2_0>.F2



Pattern5RA = (emergency -> adaptE -> ack -> Pattern5RA) [] (goto?_: {x | goto.x <- EventsRA} -> Pattern5RA) [] (grd?_: {x | grd.x <- EventsRA} -> Pattern5RA)
Pi5RA =  adaptE  ->  ra!<R0> .ack -> Pi5RA


Pattern5C2 = (emergency -> adaptE -> ack -> Pattern5C2) [] (goto?_: {x | goto.x <- EventsC2} -> Pattern5C2) [] (grd?_: {x | grd.x <- EventsC2} -> Pattern5C2)
Pi5C2 =  adaptE  ->  c2!<C2_0>.ack -> Pi5C2

---------------------------------------------
--		Composition
---------------------------------------------
Composition = let
		events = Union({eventsR1,eventsR5RA,eventsR5C2})

		R1 = (Pattern1 [|{|adaptRA,ack|}|] Pi1) \ {|adaptRA,ack|}
		R5RA = (Pattern5RA [|{|adaptE,ack|}|] Pi5RA) \ {|adaptE,ack|}
		R5C2 = (Pattern5C2 [|{|adaptE,ack|}|] Pi5C2) \ {|adaptE,ack|}

		
        AdaptationProc =  (R1  [|inter(eventsR1,union(eventsR5RA,eventsR5C2))|] (R5RA [| inter(eventsR5C2,eventsR5RA)  |] R5C2))
		
		within (new c2,ra)(((BehaviourRA [| EventsRA|] ra[R0])  [| inter(EventsRA,EventsC2) |] (Beh [| EventsC2|] c2[C2_0])) [| Union({EventsRA,EventsC2}) |] AdaptationProc)




EventsAP = {|connect,disconnect,update|}
MonitorsAP = {}

channel adapt3 : Connections


---------------------------------------------
--		Processes for Access Point
---------------------------------------------

AP0 = connect!True!HVAC -> RUN({connect.x.y | x<- Bool, y <- {Secure,Open}})
AP1 = connect!False!HVAC -> RUN({connect.x.y | x<- Bool, y <- {Secure,Open}})
AP2 = disconnect -> connect!True!HVAC -> RUN({connect.x.Secure | x<- Bool})
AP3 = RUN({connect.x.y | x<- Bool, y <- {Secure,Open}})
AP4 = disconnect -> connect!True!HVAC -> RUN({connect.x.y | x<- Bool, y <- {Secure,Open}})


---------------------------------------------
--		Internal State for Access Point
---------------------------------------------
SAV(v) =  (v < MaxConnections & connect!True!Open -> SAV(v + 1))
		[] (v > 0 & connect!False!Open -> SAV(v - 1))
		[] (disconnect -> SAV(0))

SAS(s) =  (s < MaxConnections & connect!True!Secure -> SAS(s + 1))
		[] (s > 0 & connect!False!Secure -> SAS(s - 1))

SAH(h) =  (connect!True!HVAC -> SAH(True))
		[] (connect!False!HVAC -> SAH(False))

SAU = update -> SAU
		
Behaviour = (((SAV(0) ||| SAS(0))  ||| SAH(False)) ||| SAU)
---------------------------------------------
--		Pattern for Access Point
---------------------------------------------	
Pattern3A =   let P(n) = 
				   (connect!True!Secure -> if n == 0 then adapt3!1 -> ack -> P(1) else if n < MaxConnections then P(n+1) else P(MaxConnections))
					[] (connect!False!Secure -> if n == 1 then adapt3!0 -> ack -> P(0) else if n > 0 then P(n-1) else P(0))
					[] (disconnect -> P(n))
					[] (update -> P(n))
					[] (connect?_:Bool?_:{HVAC,Open} -> P(n))
				within P(0)			
	
Pattern3B =   let P(n) = (connect!True!Open -> if n == 0 then adapt3!n+1 -> ack -> P(1) else if n < MaxConnections then P(n+1) else P(MaxConnections))
						[] (connect!False!Open -> if (n == 1) then adapt3!0 -> ack -> P(0) else if n > 0 then P(n-1) else P(0))				
						[] (disconnect -> P(0))
						[] (update -> P(n))
						[] (connect?_:Bool?_:{HVAC,Secure} -> P(n))
				within P(0)

Pattern6 =      (connect?_ -> Pattern6)  [] (disconnect -> Pattern6) [] (update -> adapt6 -> ack -> Pattern6)
			

---------------------------------------------
--		Adaptation Function
---------------------------------------------
Pi3A =  adapt3?n : Connections ->  
						if n == 1 then l!<AP2>.ack -> Pi3A
						else if n == 0 then l!<AP3>.ack -> Pi3A
						else ack -> Pi3A

Pi3B =  adapt3?n : Connections ->  
						if n == 1 then l!<AP1>.ack -> Pi3B
						else if n == 0 then l!<AP0>.ack -> Pi3B
						else ack -> Pi3B

Pi6 =  adapt6 -> l!<AP4>.ack -> Pi6

---------------------------------------------
--		Composition
---------------------------------------------
accessPtComp = let
			R3A = (Pi3A [|{| adapt3,ack |}|] Pattern3A) \ {| adapt3,ack|}
			R3B = (Pi3B [|{| adapt3,ack |}|] Pattern3B) \ {| adapt3,ack|}
			R6 = (Pi6 [|{| adapt6,ack |}|] Pattern6) \ {|adapt6,ack|}
			AdaptationProc = (((R3A [| EventsAP |] R6) [|EventsAP|] R3B) [| {|connect,disconnect|}|] Behaviour)
		within
			(new l)(l[AP0] [| union(EventsAP,{|l|}) |] AdaptationProc)


MaxConnections = 3
Connections = {0 .. MaxConnections}






---------------------------------------------
--		Composition
---------------------------------------------

Upstairs = let 	
				EventSet = {|connect.True.HVAC, connect.False.HVAC |}
				hvacComp = connect?_:Bool!HVAC -> hvacComp
			within 
			    (hvacComp [|EventSet|]accessPtComp)

RoomAB = normal((RmA [| event("A","B") |] RmB))
RoomBD = normal((RmD [| event("D","B") |] RmB))

ExhibitionArea = normal((RoomAB [| event("AB","D") |] RmD))

event(x,t)= Union({inter(E(x), M(t)), inter(E(t),M(x)),inter(E(t),E(x)), inter(M(t),M(x))})



E("") = {}
E(<x>^xs) = (if (x == 'A') then union(EventsA,E(xs)) else if (x == 'B') then union(EventsB,E(xs)) else if x == 'D' then union(EventsD,E(xs)) else {})

M("") = {}
M(<x>^xs) = (if x == 'A' then union(MonitorsA,M(xs)) else if (x == 'B') then union(MonitorsB,M(xs)) else if (x == 'D') then union(MonitorsD,M(xs)) else {})


ArtGallery = (((Upstairs [|{|connect,disconnect|}|]Stairs) [| {|goto.Str.Corr2,goto.Corr2.Str,grd.Str.Corr2,grd.Corr2.Str|}|] Composition) [|{|goto.Str.Corr,goto.Corr.Str,grd.Str.Corr,grd.Corr.Str|}|] ExhibitionArea)

include "assertions.acsp"