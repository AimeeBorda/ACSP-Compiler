---------------------------------------------
--		Restoration Area General Assertions
---------------------------------------------
assert RestorationArea :[deadlock free]
assert RestorationArea :[deterministic]
assert RestorationArea :[livelock free]

---------------------------------------------
--		Corridor Two General Assertions
---------------------------------------------
assert CorrTwo :[deadlock free]
assert CorrTwo :[deterministic]
assert CorrTwo :[livelock free]


---------------------------------------------
--		Requirement 1
---------------------------------------------

 Specification = let NoGrd =  (grd!Str!Corr2 -> GrdPres(0))
						[] (goto!Str!Corr2 -> NoGrd)
						[] (goto!Corr2!Str -> NoGrd)
					GrdPres(n) =  (n < MaxAgents & goto!Corr2!RA -> GrdPres(n+1))
						[] (n > 0  & goto!RA!Corr2 -> GrdPres(n-1))
						[] (n == 0 & grd!Corr2!Str -> NoGrd)
						[] (grd?_:{Corr2,RA}?_:{RA,Corr2} -> GrdPres(n))
						[] (goto?_:{Corr2,Str}?_:{Str,Corr2} -> GrdPres(n))
				within NoGrd ||| emergency -> RUN(Union({MonitorsC2,MonitorsRA,EventsRA,EventsC2}))

assert Specification [T= Upstairs

---------------------------------------------
--	 Assertions about Adapatation Pattern
---------------------------------------------


assert Pattern1C2 \ {|adapt,adaptE,ack|} [T= RUN(union(EventsC2,Monitors1C2))
assert RUN(union(EventsC2,Monitors1C2))[F= Pattern1C2 \ {|adapt,adaptE,ack|}

assert Pattern5C2 \ {|adapt,adaptE,ack|} [T= RUN(union(EventsC2,Monitors5))
assert RUN(union(EventsC2,Monitors5))[F= Pattern5C2 \ {|adapt,adaptE,ack|}

assert Pattern1 \ {|adapt,adaptE,ack|} [T= RUN(union(EventsRA,Monitors1))
assert RUN(union(EventsRA,Monitors1))[F= Pattern1 \ {|adapt,adaptE,ack|}

assert Pattern5RA \ {|adapt,adaptE,ack|} [T= RUN(union(EventsRA,Monitors5))
assert RUN(union(EventsRA,Monitors5))[F= Pattern5RA \ {|adapt,adaptE,ack|}