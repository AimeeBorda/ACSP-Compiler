transparent normal 

EventsA = {| connect , disconnect , update |}
MonitorsA = { }
channel adapt3 : Connections
channel adapt6
A0 = disconnect -> HVAC -> A0'
A0' = ( { HVAC , Secure } -> A0' ) [] ( update -> A0' )
A1 = ( Secure -> A1 ) [] ( update -> A1 ) [] ( Open -> A1 ) [] ( HVAC -> A1' )
A1' = ( Connection -> A1' ) [] ( update -> A1' )
Pattern3A = let P ( n ) = ( n == 0 & n + 1 -> ack -> P ( n + 1 ) ) [] ( n < MaxConnections and n > 0 & Secure -> P ( n + 1 ) ) [] ( n > 1 & Secure -> P ( n - 1 ) ) [] ( n == 1 & 0 -> ack -> P ( n - 1 ) ) [] ( disconnect -> P ( n ) ) [] ( update -> P ( n ) ) [] ( { HVAC , Open } -> P ( n ) ) within P ( 0 )
Pattern6 = ( _ -> Pattern6 ) [] ( disconnect -> Pattern6 ) [] ( update -> adapt6 -> ack -> Pattern6 )
PiA3 = Connections -> if s == 1 then ack -> PiA3 else if s == 0 then ack -> PiA3 else ack -> PiA3
PiA6 = adapt6 -> ack -> PiA6
accessPtComp = let R3 = ( PiA3 [| {| adapt3 , ack |} |] Pattern3A ) \ {| adapt3 , adapt6 , ack |} R6 = ( PiA6 [| {| adapt6 , ack |} |] Pattern6 ) \ {| adapt3 , adapt6 , ack |} AdaptationProc = R3 [| union ( EventsA , MonitorsA ) |] R6 proc = ( let R = (l?id -> (map(l,id) /\ R)) within A1'/\ R [| EventsA |] AdaptationProc ) within proc



